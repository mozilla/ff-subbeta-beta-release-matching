geom_density(adjust=1.5, alpha=0.6, main="Time to DOM Complete (ms)") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
plot(df_release, pch=20 , cex=1.5 , col="#69b3a2")
plot_correlation(df_release)
plot_correlation(df_release, type = "c")
cat <- unlist(lapply(df_release, is.numeric))
plot(cat, pch=20 , cex=1.5 , col="#69b3a2")
cat <- unlist(lapply(df_release, is.numeric))
plot(df_release[, cat], pch=20 , cex=1.5 , col="#69b3a2")
cat <- unlist(lapply(df_release, is.numeric))
correlations <- cor(df_release[, cat])
row_indic <- apply(correlations, 1, function(x) sum(x > 0.3 | x < -0.3) > 1)
correlations <- correlations[row_indic,row_indic]
corrplot(correlations, method = "color", order = "FPC", number.cex = .55,
addCoef.col = "black", tl.srt = 45, # Add coefficient of correlation
tl.col = "black")
cat <- unlist(lapply(df_release, is.numeric))
correlations <- cor(df_release[, cat])
row_indic <- apply(correlations, 1, function(x) sum(x > 0.3 | x < -0.3) > 1)
correlations <- correlations[row_indic,row_indic]
corrplot(na.omit(correlations), method = "color", order = "FPC", number.cex = .55,
addCoef.col = "black", tl.srt = 45, # Add coefficient of correlation
tl.col = "black")
cat <- unlist(lapply(df_release, is.numeric))
correlations <- cor(df_release[, cat])
correlations
plot_correlation(df_release, maxcat = 5L)
cat <- unlist(lapply(df_release, is.numeric))
correlations <- cor(df_release[, cat])
correlations_df <- as.data.frame(correlations)
names <- row.names(correlations_df)
head(correlations_df)
## Loading the needed libraries
library(kableExtra)      # help you build common complex tables and manipulate table styles
library(tidyverse)       # for general data wrangling (includes readr and dplyr)
library(ggplot2)         # to draw statistical plots
library(plotly)          # to construct interactive 3d plots
library(DataExplorer)    # automated data exploration
library(corrplot)        # to plot nice correlation matrix
library(caret)           # includes several functions to pre-process
library(scales)          # to determining breaks and labels for axes and legends
library(skimr)
library(funModeling)
library(Hmisc)
library(grid)
library(hrbrthemes)
library(tidyr)
library(viridis)
library(ggthemes)
## Loading the training dataset
load("~/GitHub/ff-beta-release-matching/poc/EDA/data_milestone2_df_train_validate_20191025.RData")
## View train dataframe
kable(head(df_train_f)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
kable(introduce(df_train_f)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
plot_intro(df_train_f, ggtheme = theme_minimal())
glimpse(df_train_f)
kable(df_status(df_train_f, FALSE)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
df_release <- df_train_f[which(df_train_f$label == 'release'), ]
df_beta <- df_train_f[which(df_train_f$label == 'beta'), ]
f <- freq(df_train_f$label)
summary(df_release)
summary(df_beta)
## Frequency distribution release dataframe
plot_bar(df_release, ggtheme = theme_minimal(base_size = 15))
## Frequency distribution beta dataframe
plot_bar(df_beta, ggtheme = theme_minimal(base_size = 15))
## View histogram of release dataset
plot_histogram(df_release, ggtheme = theme_minimal(base_size = 15))
## View histogram of beta dataset
plot_histogram(df_beta, ggtheme = theme_minimal(base_size = 15))
ggplot(data=df_train_f, aes(x=daily_max_tabs, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Daily Max Tabs") + xlim(0, 20) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=startup_ms, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Startup (ms)") + xlim(0, 5) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=startup_ms, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Startup (ms)") + xlim(0, 5) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=num_active_days, group=label, fill=label)) +
geom_histogram(stat = "bin", position = "identity", alpha=0.5, main="Num Active Days") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=active_hours, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Active Hours") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=active_hours, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Active Hours") +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Num Pages") + xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="URI Count") + xlim(0, 20) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="URI Count") + #xlim(0, 20) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="URI Count") + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()
ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="URI Count Density Curve",x="URI Count", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=active_hours, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Active Hours Density Curve",x="Active Hours", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Num Pages Density Curve",x="Num Pages", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=session_length, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Session Length") + xlim(0, 20) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Session Length Density Curve",x="Session Length", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=session_length, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Session Length") + xlim(0, 50) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Session Length Density Curve",x="Session Length", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=session_length, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Session Length") + xlim(0, 100) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Session Length Density Curve",x="Session Length", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=session_length, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Session Length") + xlim(0, 75) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Session Length Density Curve",x="Session Length", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=session_length, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Session Length") #+ xlim(0, 75) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Session Length Density Curve",x="Session Length", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=session_length, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Session Length") +# xlim(0, 75) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Session Length Density Curve",x="Session Length", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=session_length, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6, main="Session Length") + xlim(0, 75) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Session Length Density Curve",x="Session Length", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) +# xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Num Pages Density Curve",x="Num Pages", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Num Pages Density Curve",x="Num Pages", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) +# xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Num Pages Density Curve",x="Num Pages", y = "Density") +
theme_ipsum()
ggplot(data=df_train_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Num Pages Density Curve",x="Num Pages", y = "Density") +
theme_ipsum()
colnames(df_train_f)
colnames(df_train_f[,1])
colnames(df_train_f[1])
colnames(df_train_f)
user_eng <- c("num_active_days", "active_hours", "active_hours_max", "uri_count", "uri_count_max", "session_length", "session_length_max", "search_count", "search_count_max", "num_bookmarks", "num_pages", "num_pages_max", "daily_unique_domains", "daily_max_tabs", "daily_tabs_opened", "daily_num_sessions_started", "daily_unique_domains_max", "daily_max_tabs_max", "daily_tabs_opened_max", "daily_num_sessions_started_max", "fxa_configured", "sync_configured")
df_beta %>% select(user_eng)
df_release %>% select(user_eng)
df_beta %>% select(user_eng) %>% df_beta_ue
View(df_release)
df_beta_ue %>% df_beta %>% select(user_eng)
df_beta_ue <- df_beta %>% select(user_eng)
df_release_ue <- df_release %>% select(user_eng)
df_beta_ue <- df_beta %>% select(user_eng)
df_release_ue <- df_release %>% select(user_eng)
qqnorm(df_beta_ue$num_active_days, pch = 1, frame = FALSE)
qqline(df_release_ue$num_active_days, col = "steelblue", lwd = 2)
for (i in user_eng) {
qqnorm(df_beta_ue$i, pch = 1, frame = FALSE)
qqline(df_release_ue$i, col = "steelblue", lwd = 2)
}
for (i in user_eng) {
print(i)
qqnorm(df_beta_ue$i, pch = 1, frame = FALSE)
qqline(df_release_ue$i, col = "steelblue", lwd = 2)
}
for (i in user_eng) {
x <- eval(as.name(i))
qqnorm(df_beta_ue$x, pch = 1, frame = FALSE)
qqline(df_release_ue$x, col = "steelblue", lwd = 2)
}
for (i in user_eng) {
qqnorm(df_beta_ue[i], pch = 1, frame = FALSE)
qqline(df_release_ue[i], col = "steelblue", lwd = 2)
}
df_beta_ue[i]
View(df_beta_ue)
df_release_ue[i]
sapply(names(user_eng),
function(x) qqnorm(df_beta_ue$x, pch = 1, frame = FALSE))
sapply(user_eng,
function(x) qqnorm(df_beta_ue$x, pch = 1, frame = FALSE))
sapply(names(df_beta_ue[ , user_eng]),
function(x) qqnorm(df_beta_ue$x, pch = 1, frame = FALSE))
sapply(names(df_beta_ue[[user_eng]]),
function(x) qqnorm(df_beta_ue$x, pch = 1, frame = FALSE))
sapply(c(user_eng)),
sapply(c(user_eng),
function(x) qqnorm(df_beta_ue$x, pch = 1, frame = FALSE))
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) { # Loop over loop.vector
# store data in column.i as x
x <- df_beta_ue[,i]
# Plot histogram of x
hist(x,
main = paste("Question", i),
xlab = "Scores",
xlim = c(0, 100))
}
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) { # Loop over loop.vector
# store data in column.i as x
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
# Plot histogram of x
qqnorm(x, pch = 1, frame = FALSE)
qqline(y, col = "steelblue", lwd = 2)
}
df_beta_ue <- df_beta %>% select(user_eng)
df_release_ue <- df_release %>% select(user_eng)
df_train_ue <- df_train_f %>% select(user_eng)
user_eng <- c("num_active_days", "active_hours", "active_hours_max", "uri_count", "uri_count_max", "session_length", "session_length_max", "search_count", "search_count_max", "num_bookmarks", "num_pages", "num_pages_max", "daily_unique_domains", "daily_max_tabs", "daily_tabs_opened", "daily_num_sessions_started", "daily_unique_domains_max", "daily_max_tabs_max", "daily_tabs_opened_max", "daily_num_sessions_started_max", "fxa_configured", "sync_configured", "label")
df_beta_ue <- df_beta %>% select(user_eng)
df_release_ue <- df_release %>% select(user_eng)
df_train_ue <- df_train_f %>% select(user_eng)
plot_qq(df_train_ue, by = "label", sampled_rows = 1000L)
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) { # Loop over loop.vector
# store data in column.i as x
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
# Plot histogram of x
qqnorm(x, pch = 1, frame = FALSE)
qqline(y, col = "steelblue", lwd = 2)
}
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) { # Loop over loop.vector
# store data in column.i as x
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
# Plot histogram of x
qqnorm(x, y pch = 1, frame = FALSE)
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) { # Loop over loop.vector
# store data in column.i as x
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
# Plot histogram of x
qqnorm(x, y, pch = 1, frame = FALSE)
#qqline(y, col = "steelblue", lwd = 2)
}
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) { # Loop over loop.vector
# store data in column.i as x
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
# Plot histogram of x
qqnorm(x, pch = 1, frame = FALSE)
qqline(y, col = "steelblue", lwd = 2)
}
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) { # Loop over loop.vector
# store data in column.i as x
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
ggplot() + geom_point(aes(x, y))
# Plot histogram of x
# qqnorm(x, pch = 1, frame = FALSE)
#	qqline(y, col = "steelblue", lwd = 2)
}
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) { # Loop over loop.vector
# store data in column.i as x
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
g <- ggplot() + geom_point(aes(x, y))
g
# Plot histogram of x
# qqnorm(x, pch = 1, frame = FALSE)
#	qqline(y, col = "steelblue", lwd = 2)
}
g
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) { # Loop over loop.vector
# store data in column.i as x
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
qqplot(x, y, main="Volume vs Girth of trees")
# Plot histogram of x
# qqnorm(x, pch = 1, frame = FALSE)
#	qqline(y, col = "steelblue", lwd = 2)
}
user_eng <- c("num_active_days", "active_hours", "active_hours_max", "uri_count", "uri_count_max", "session_length", "session_length_max", "search_count", "search_count_max", "num_bookmarks", "num_pages", "num_pages_max", "daily_unique_domains", "daily_max_tabs", "daily_tabs_opened", "daily_num_sessions_started", "daily_unique_domains_max", "daily_max_tabs_max", "daily_tabs_opened_max", "daily_num_sessions_started_max", "fxa_configured", "sync_configured")
df_beta_ue <- df_beta %>% select(user_eng)
df_release_ue <- df_release %>% select(user_eng)
df_train_ue <- df_train_f %>% select(user_eng)
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) {
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
title <- paste(i,"QQ-Plot",sep=" ")
qqplot(x, y, main=title, xlab = "Beta", ylab = "Release")
}
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) {
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
title <- paste(i,"QQ-Plot",sep=" ")
qqPlot(x, y, main=title, xlab = "Beta", ylab = "Release")
}
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) {
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
title <- paste(i,"QQ-Plot",sep=" ")
qqplot(x, y, main=title, xlab = "Beta", ylab = "Release", pch = 1, frame = FALSE)
}
user_eng <- c("num_active_days", "active_hours", "active_hours_max", "uri_count", "uri_count_max", "session_length", "session_length_max", "search_count", "search_count_max", "num_bookmarks", "num_pages", "num_pages_max", "daily_unique_domains", "daily_max_tabs", "daily_tabs_opened", "daily_num_sessions_started", "daily_unique_domains_max", "daily_max_tabs_max", "daily_tabs_opened_max", "daily_num_sessions_started_max")
df_beta_ue <- df_beta %>% select(user_eng)
df_release_ue <- df_release %>% select(user_eng)
df_train_ue <- df_train_f %>% select(user_eng)
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) {
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
title <- paste(i,"QQ-Plot",sep=" ")
qqplot(x, y, main=title, xlab = "Beta", ylab = "Release", pch = 1, frame = FALSE)
}
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) {
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
qqplot(x, y, main=i, xlab = "Beta", ylab = "Release", pch = 1, frame = FALSE, col.pCI = 'red')
}
par(mfrow = c(2, 2))  # Set up a 2 x 2 plotting space
for (i in user_eng) {
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
qqplot(x, y, main=i, xlab = "Beta", ylab = "Release", pch = 1, frame = FALSE)
}
par(mfrow = c(2, 2))  ## Set up a 2 x 2 plotting space
## QQ plot in R to compare two data samples
for (i in user_eng) {
x <- df_beta_ue[,i]
y <- df_release_ue[,i]
rg <- range(x, y, na.rm=T)
qqplot(x, y, main=i, xlim=rg, ylim=rg, xlab = "Beta", ylab = "Release", pch = 1, frame = FALSE)
}
df <- as.data.frame(df_beta_ue$active_hours, df_release_ue$active_hours)
df <- as.data.frame((df_beta_ue$active_hours, df_release_ue$active_hours))
df <- as.data.frame(cbind(df_beta_ue$active_hours, df_release_ue$active_hours))
View(df_train_ue)
# Use box plot as marginal plots
ggscatterhist(
df_train_ue, x = df_train_f$active_hours, y = df_train_f$active_hours,
color = df_train_f$label, size = 3, alpha = 0.6,
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
margin.plot = "boxplot",
ggtheme = theme_bw()
)
## Loading the needed libraries
library(kableExtra)      # help you build common complex tables and manipulate table styles
library(tidyverse)       # for general data wrangling (includes readr and dplyr)
library(ggplot2)         # to draw statistical plots
library(plotly)          # to construct interactive 3d plots
library(DataExplorer)    # automated data exploration
library(corrplot)        # to plot nice correlation matrix
library(caret)           # includes several functions to pre-process
library(scales)          # to determining breaks and labels for axes and legends
library(skimr)
library(funModeling)
library(Hmisc)
library(grid)
library(hrbrthemes)
library(tidyr)
library(viridis)
library(ggpubr)
library(ggthemes)
# Use box plot as marginal plots
ggscatterhist(
df_train_ue, x = df_train_f$active_hours, y = df_train_f$active_hours,
color = df_train_f$label, size = 3, alpha = 0.6,
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
margin.plot = "boxplot",
ggtheme = theme_bw()
)
# Use box plot as marginal plots
ggplot(df_train_f, aes(x = df_train_f$active_hours, y = df_train_f$active_hours)) + geom_point(aes(color = df_train_f$label), alpha = 0.5)
df_beta_ue <- df_beta %>% select(user_eng)
df_release_ue <- df_release %>% select(user_eng)
df_train_ue <- df_train_f %>% select(c(user_eng, "label"))
install.packages("GGally")
ggpairs(df_release_ue, aes(color = label))+ theme_bw()
## Loading the needed libraries
library(kableExtra)      # help you build common complex tables and manipulate table styles
library(tidyverse)       # for general data wrangling (includes readr and dplyr)
library(ggplot2)         # to draw statistical plots
library(plotly)          # to construct interactive 3d plots
library(DataExplorer)    # automated data exploration
library(corrplot)        # to plot nice correlation matrix
library(caret)           # includes several functions to pre-process
library(scales)          # to determining breaks and labels for axes and legends
library(skimr)
library(funModeling)
library(Hmisc)
library(grid)
library(hrbrthemes)
library(tidyr)
library(viridis)
library(ggpubr)
library(ggthemes)
library(GGally)
ggpairs(df_release_ue, aes(color = label))+ theme_bw()
df_beta_ue <- df_beta %>% select(user_eng)
df_release_ue <- df_release %>% select(user_eng)
df_train_ue <- df_train_f %>% select(c(user_eng, "label"))
ggpairs(df_train_f, aes(color = label))+ theme_bw()
ggpairs(df_train_ue, aes(color = label))+ theme_bw()
ggpairs(df_train_ue, aes(color = label))+ theme_bw()
text_tbl <- data.frame(Summaries = c(summary(df_beta_ue$active_hours), summary(df_release_ue$active_hours)))
kable(text_tbl)
text_tbl <- data.frame(Beta = summary(df_beta_ue$active_hours), Release = summary(df_release_ue$active_hours))
text_tbl <- data.frame(Beta = c(summary(df_beta_ue$active_hours)), Release = c(summary(df_release_ue$active_hours)))
kable(text_tbl)
text_tbl <- data.frame(Beta = c(summary(df_beta_ue$active_hours)), Release = c(summary(df_release_ue$active_hours)))
kable(text_tbl) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
text_tbl <- data.frame(beta_num_active_days = c(summary(df_beta_ue$num_active_days)), release_num_active_days = c(summary(df_release_ue$num_active_days)),
beta_active_hours = c(summary(df_beta_ue$active_hours)), release_active_hours = c(summary(df_release_ue$active_hours)),
beta_active_hours_max = c(summary(df_beta_ue$active_hours_max)), release_active_hours_max = c(summary(df_release_ue$active_hours_max)),
beta_uri_count = c(summary(df_beta_ue$uri_count)), release_uri_count = c(summary(df_release_ue$uri_count)),
beta_uri_count_max = c(summary(df_beta_ue$uri_count_max)), release_uri_count_max = c(summary(df_release_ue$uri_count_max)),
beta_session_length = c(summary(df_beta_ue$session_length)), release_session_length = c(summary(df_release_ue$session_length)),
beta_session_length_max = c(summary(df_beta_ue$session_length_max)), release_session_length_max = c(summary(df_release_ue$session_length_max)),
beta_search_count = c(summary(df_beta_ue$search_count)), release_search_count = c(summary(df_release_ue$search_count)),
beta_search_count_max = c(summary(df_beta_ue$search_count_max)), release_search_count_max = c(summary(df_release_ue$search_count_max)),
beta_num_bookmarks = c(summary(df_beta_ue$num_bookmarks)), release_num_bookmarks = c(summary(df_release_ue$num_bookmarks)),
beta_num_pages = c(summary(df_beta_ue$num_pages)), release_num_pages = c(summary(df_release_ue$num_pages)),
beta_num_pages_max = c(summary(df_beta_ue$num_pages_max)), release_num_pages_max = c(summary(df_release_ue$num_pages_max)),
beta_daily_unique_domains = c(summary(df_beta_ue$daily_unique_domains)), release_daily_unique_domains = c(summary(df_release_ue$daily_unique_domains)),
beta_daily_max_tabs = c(summary(df_beta_ue$daily_max_tabs)), release_daily_max_tabs = c(summary(df_release_ue$daily_max_tabs)),
beta_daily_tabs_opened = c(summary(df_beta_ue$daily_tabs_opened)), release_daily_tabs_opened = c(summary(df_release_ue$daily_tabs_opened)),
beta_daily_num_sessions_started = c(summary(df_beta_ue$daily_num_sessions_started)), release_daily_num_sessions_started = c(summary(df_release_ue$daily_num_sessions_started)),
beta_daily_unique_domains_max = c(summary(df_beta_ue$daily_unique_domains_max)), release_daily_unique_domains_max = c(summary(df_release_ue$daily_unique_domains_max)),
beta_daily_max_tabs_max = c(summary(df_beta_ue$daily_max_tabs_max)), release_daily_max_tabs_max = c(summary(df_release_ue$daily_max_tabs_max)),
beta_daily_tabs_opened_max = c(summary(df_beta_ue$daily_tabs_opened_max)), release_daily_tabs_opened_max = c(summary(df_release_ue$daily_tabs_opened_max)),
beta_daily_num_sessions_started_max = c(summary(df_beta_ue$daily_num_sessions_started_max)), release_daily_num_sessions_started_max = c(summary(df_release_ue$daily_num_sessions_started_max)))
kable(text_tbl) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
