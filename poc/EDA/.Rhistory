## QQ plot in R to compare two data samples
for (i in user_eng_dis) {
x <- df_beta_ue_dis[,i]
y <- df_release_ue_dis[,i]
rel_beta <- table(x)/nrow(df_beta_ue_dis) #divide the frequency counts by the total
beta_bar <- barplot(rel_beta,
main = "Beta", #Give your chart a title
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(beta_bar, rel_beta+0.5, paste(round(rel_beta*100), "%", sep="") ,cex=1)
rel_release <- table(y)/nrow(df_release_ue_dis) #divide the frequency counts by the total
release_bar <- barplot(rel_release,
main = "Release", #Give your chart a title
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(release_bar, rel_release+0.1, paste(round(rel_release*100), "%", sep="") ,cex=1)
}
par(mfrow = c(2, 2))  ## Set up a 2 x 2 plotting space
## QQ plot in R to compare two data samples
for (i in user_eng_dis) {
x <- df_beta_ue_dis[,i]
y <- df_release_ue_dis[,i]
rel_beta <- table(x)/nrow(df_beta_ue_dis) #divide the frequency counts by the total
beta_bar <- barplot(rel_beta,
main = "Beta", #Give your chart a title
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(beta_bar, rel_beta+0.5, paste(round(rel_beta*100), "%", sep="") ,cex=1)
rel_release <- table(y)/nrow(df_release_ue_dis) #divide the frequency counts by the total
release_bar <- barplot(rel_release,
main = "Release", #Give your chart a title
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(release_bar, rel_release-0.05, paste(round(rel_release*100), "%", sep="") ,cex=1)
}
par(mfrow = c(2, 2))  ## Set up a 2 x 2 plotting space
## QQ plot in R to compare two data samples
for (i in user_eng_dis) {
x <- df_beta_ue_dis[,i]
y <- df_release_ue_dis[,i]
rel_beta <- table(x)/nrow(df_beta_ue_dis) #divide the frequency counts by the total
beta_bar <- barplot(rel_beta,
main = "Beta", #Give your chart a title
ylim=c(0,1),
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(beta_bar, rel_beta+0.025, paste(round(rel_beta*100), "%", sep="") ,cex=1)
rel_release <- table(y)/nrow(df_release_ue_dis) #divide the frequency counts by the total
release_bar <- barplot(rel_release,
main = "Release", #Give your chart a title
ylim=c(0,1),
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(release_bar, rel_release+0.025, paste(round(rel_release*100), "%", sep="") ,cex=1)
}
par(mfrow = c(2, 2))  ## Set up a 2 x 2 plotting space
## QQ plot in R to compare two data samples
for (i in user_eng_dis) {
x <- df_beta_ue_dis[,i]
y <- df_release_ue_dis[,i]
rel_beta <- table(x)/nrow(df_beta_ue_dis) #divide the frequency counts by the total
beta_bar <- barplot(rel_beta,
main = "Beta", #Give your chart a title
ylim=c(0,1), border=F, col = "navy",
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(beta_bar, rel_beta+0.025, paste(round(rel_beta*100), "%", sep="") ,cex=1)
rel_release <- table(y)/nrow(df_release_ue_dis) #divide the frequency counts by the total
release_bar <- barplot(rel_release,
main = "Release", #Give your chart a title
ylim=c(0,1), border=F, col = "navy",
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(release_bar, rel_release+0.025, paste(round(rel_release*100), "%", sep="") ,cex=1)
}
## View train dataframe
kable(head(df_validate_f)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
kable(introduce(df_validation_f)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
kable(introduce(df_validate_f)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
plot_intro(df_validate_f, ggtheme = theme_minimal())
glimpse(df_validate_f)
kable(df_status(df_train_f, FALSE)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
df_v_release <- df_validate_f[which(df_validate_f$label == 'release'), ]
df_v_beta <- df_validate_f[which(df_validate_f$label == 'beta'), ]
f <- freq(df_validate_f$label)
summary(df_v_release)
summary(df_v_beta)
## Frequency distribution release dataframe
plot_bar(df_release, ggtheme = theme_minimal(base_size = 15))
## Frequency distribution release dataframe
plot_bar(df_release, ggtheme = theme_minimal(base_size = 15))
## Frequency distribution release dataframe
plot_bar(df_release, ggtheme = theme_minimal(base_size = 15))
## Frequency distribution release dataframe
plot_bar(df_release, ggtheme = theme_minimal(base_size = 15))
## Loading the needed libraries
library(kableExtra)      # help you build common complex tables and manipulate table styles
library(tidyverse)       # for general data wrangling (includes readr and dplyr)
library(ggplot2)         # to draw statistical plots
library(plotly)          # to construct interactive 3d plots
library(DataExplorer)    # automated data exploration
library(corrplot)        # to plot nice correlation matrix
library(caret)           # includes several functions to pre-process
library(scales)          # to determining breaks and labels for axes and legends
library(skimr)
library(funModeling)
library(Hmisc)
library(grid)
library(hrbrthemes)
library(tidyr)
library(viridis)
library(ggpubr)
library(ggthemes)
library(GGally)
library(nortest)
## Loading the training dataset
load("~/GitHub/ff-beta-release-matching/poc/EDA/data_milestone2_df_train_validate_20191025.RData")
## View train dataframe
kable(head(df_train_f)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
## View train dataframe
kable(head(df_validate_f)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
kable(introduce(df_train_f)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
plot_intro(df_train_f, ggtheme = theme_minimal())
kable(introduce(df_validate_f)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
plot_intro(df_validate_f, ggtheme = theme_minimal())
glimpse(df_train_f)
kable(df_status(df_train_f, FALSE)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
glimpse(df_validate_f)
kable(df_status(df_train_f, FALSE)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
df_release <- df_train_f[which(df_train_f$label == 'release'), ]
df_beta <- df_train_f[which(df_train_f$label == 'beta'), ]
f <- freq(df_train_f$label)
summary(df_release)
summary(df_beta)
df_v_release <- df_validate_f[which(df_validate_f$label == 'release'), ]
df_v_beta <- df_validate_f[which(df_validate_f$label == 'beta'), ]
f <- freq(df_validate_f$label)
summary(df_v_release)
summary(df_v_beta)
## Frequency distribution release dataframe
plot_bar(df_release, ggtheme = theme_minimal(base_size = 15))
## Frequency distribution beta dataframe
plot_bar(df_beta, ggtheme = theme_minimal(base_size = 15))
## Frequency distribution release dataframe
plot_bar(df_v_release, ggtheme = theme_minimal(base_size = 15))
## Frequency distribution beta dataframe
plot_bar(df_v_beta, ggtheme = theme_minimal(base_size = 15))
## View histogram of release dataset
plot_histogram(df_release, ggtheme = theme_minimal(base_size = 15))
## View histogram of beta dataset
plot_histogram(df_beta, ggtheme = theme_minimal(base_size = 15))
par(mfrow = c(2, 2), title="URI Count Density Curve")  ## Set up a 2 x 2 plotting space
## Training
ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Training",x="URI Count", y = "Density") +
theme_ipsum()
## Validation
ggplot(data=df_validate_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Validation",x="URI Count", y = "Density") +
theme_ipsum()
## Training
ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Training",x="URI Count", y = "Density") +
theme_ipsum()
## Validation
ggplot(data=df_validate_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Validation",x="URI Count", y = "Density") +
theme_ipsum()
par(mfrow = c(2, 2), title="URI Count Density Curve")  ## Set up a 2 x 2 plotting space
## Training
ggplot(data=df_train_f, aes(x=active_hours, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Training",x="Active Hours", y = "Density") +
theme_ipsum()
## Validation
ggplot(data=df_validate_f, aes(x=active_hours, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Validation",x="Active Hours", y = "Density") +
theme_ipsum()
par(mfrow = c(2, 2), title="Active Hours Density Curve")  ## Set up a 2 x 2 plotting space
require(gridExtra)
## Training
t <- ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Training",x="URI Count", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Validation",x="URI Count", y = "Density") +
theme_ipsum()
grid.arrange(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
require(cowplot)
## Training
t <- ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Training",x="URI Count", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="Validation",x="URI Count", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="URI Count Density Curve",x="URI Count", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="URI Count Density Curve",x="URI Count", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="URI Count Density Curve",x="URI Count", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="URI Count Density Curve",x="URI Count", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="URI Count Density Curve",x="URI Count", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(title="URI Count Density Curve",x="URI Count", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="URI Count", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="URI Count", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=active_hours, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Active Hours", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=active_hours, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Active Hours", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Num Pages", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Num Pages", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Num Pages", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=num_pages, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 50000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Num Pages", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=active_hours, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Active Hours", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=active_hours, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Active Hours", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="URI Count", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=uri_count, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 1000) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="URI Count", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
## Training
t <- ggplot(data=df_train_f, aes(x=session_length, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 75) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Session Length", y = "Density") +
theme_ipsum()
## Validation
v <- ggplot(data=df_validate_f, aes(x=session_length, group=label, fill=label)) +
geom_density(adjust=1.5, alpha=0.6) + xlim(0, 75) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
labs(x="Session Length", y = "Density") +
theme_ipsum()
plot_grid(t, v, ncol=2, labels = c("Train", "Validate")) ## Set up a 2 x 2 plotting space
df_beta_ue <- df_beta %>% select(user_eng)
df_release_ue <- df_release %>% select(user_eng)
df_train_ue <- df_train_f %>% select(c(user_eng, "label"))
df_beta_v_ue <- df_v_beta %>% select(user_eng)
df_release_v_ue <- df_v_release %>% select(user_eng)
df_validate_ue <- df_validate_f %>% select(c(user_eng, "label"))
text_tbl_v <- data.frame(
beta_num_active_days = c(summary(df_beta_v_ue$num_active_days)), release_num_active_days = c(summary(df_release_v_ue$num_active_days)),
beta_active_hours = c(summary(df_beta_v_ue$active_hours)), release_active_hours = c(summary(df_release_v_ue$active_hours)),
beta_active_hours_max = c(summary(df_beta_v_ue$active_hours_max)), release_active_hours_max = c(summary(df_release_v_ue$active_hours_max)),
beta_uri_count = c(summary(df_beta_v_ue$uri_count)), release_uri_count = c(summary(df_release_v_ue$uri_count)),
beta_uri_count_max = c(summary(df_beta_v_ue$uri_count_max)), release_uri_count_max = c(summary(df_release_v_ue$uri_count_max)),
beta_session_length = c(summary(df_beta_v_ue$session_length)), release_session_length = c(summary(df_release_v_ue$session_length)),
beta_session_length_max = c(summary(df_beta_v_ue$session_length_max)), release_session_length_max = c(summary(df_release_v_ue$session_length_max)),
beta_search_count = c(summary(df_beta_v_ue$search_count)), release_search_count = c(summary(df_release_v_ue$search_count)),
beta_search_count_max = c(summary(df_beta_v_ue$search_count_max)), release_search_count_max = c(summary(df_release_v_ue$search_count_max)),
beta_num_bookmarks = c(summary(df_beta_v_ue$num_bookmarks)), release_num_bookmarks = c(summary(df_release_v_ue$num_bookmarks)),
beta_num_pages = c(summary(df_beta_v_ue$num_pages)), release_num_pages = c(summary(df_release_v_ue$num_pages)),
beta_num_pages_max = c(summary(df_beta_v_ue$num_pages_max)), release_num_pages_max = c(summary(df_release_v_ue$num_pages_max)),
beta_daily_unique_domains = c(summary(df_beta_v_ue$daily_unique_domains)), release_daily_unique_domains = c(summary(df_release_v_ue$daily_unique_domains)),
beta_daily_max_tabs = c(summary(df_beta_v_ue$daily_max_tabs)), release_daily_max_tabs = c(summary(df_release_v_ue$daily_max_tabs)),
beta_daily_tabs_opened = c(summary(df_beta_v_ue$daily_tabs_opened)), release_daily_tabs_opened = c(summary(df_release_v_ue$daily_tabs_opened)),
beta_daily_num_sessions_started = c(summary(df_beta_v_ue$daily_num_sessions_started)), release_daily_num_sessions_started = c(summary(df_release_v_ue$daily_num_sessions_started)),
beta_daily_unique_domains_max = c(summary(df_beta_v_ue$daily_unique_domains_max)), release_daily_unique_domains_max = c(summary(df_release_v_ue$daily_unique_domains_max)),
beta_daily_max_tabs_max = c(summary(df_beta_v_ue$daily_max_tabs_max)), release_daily_max_tabs_max = c(summary(df_release_v_ue$daily_max_tabs_max)),
beta_daily_tabs_opened_max = c(summary(df_beta_v_ue$daily_tabs_opened_max)), release_daily_tabs_opened_max = c(summary(df_release_v_ue$daily_tabs_opened_max)),
beta_daily_num_sessions_started_max = c(summary(df_beta_v_ue$daily_num_sessions_started_max)), release_daily_num_sessions_started_max = c(summary(df_release_v_ue$daily_num_sessions_started_max)),
beta_startup_ms = c(summary(df_beta_v_ue$startup_ms)), release_startup_ms = c(summary(df_release_v_ue$startup_ms)),
beta_install_year = c(summary(df_beta_v_ue$install_year)), release_install_year = c(summary(df_release_v_ue$install_year)),
beta_profile_age = c(summary(df_beta_v_ue$profile_age)), release_profile_age = c(summary(df_release_v_ue$profile_age)),
beta_timezone_offset = c(summary(df_beta_v_ue$timezone_offset)), release_timezone_offset = c(summary(df_release_v_ue$timezone_offset)),
beta_memory_mb = c(summary(df_beta_v_ue$memory_mb)), release_memory_mb = c(summary(df_release_v_ue$memory_mb)),
beta_cpu_cores = c(summary(df_beta_v_ue$cpu_cores)), release_cpu_cores = c(summary(df_release_v_ue$cpu_cores)),
beta_cpu_speed_mhz = c(summary(df_beta_v_ue$cpu_speed_mhz)), release_cpu_speed_mhz = c(summary(df_release_v_ue$cpu_speed_mhz)),
beta_cpu_l2_cache_kb = c(summary(df_beta_v_ue$cpu_l2_cache_kb)), release_cpu_l2_cache_kb = c(summary(df_release_v_ue$cpu_l2_cache_kb))
)
kable(text_tbl_v) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
scroll_box(width = "100%")
par(mfrow = c(2, 2))  ## Set up a 2 x 2 plotting space
## QQ plot in R to compare two data samples
for (i in user_eng) {
x <- df_beta_v_ue[,i]
y <- df_release_v_ue[,i]
rg <- range(x, y, na.rm=T)
test <- ks.test(x, y)$statistic
pvalue <- ks.test(x, y)$p.value
test <- paste("KS Test = ", round(test, 3))
pvalue <- paste("P-value = ", round(pvalue, 3))
qqplot(x, y, main=i, xlim=rg, ylim=rg, xlab = "Beta", ylab = "Release", pch = 1)
# mtext(test, side=3)
text(min(x), max(x), paste(pvalue, "\n", test), adj=c(0,1))
abline(0,1, col="red")
}
for (i in user_eng) {
x <- df_beta_v_ue[,i]
y <- df_release_v_ue[,i]
print(i)
# print(ad.test(x))
# print(ad.test(y))
print(ks.test(x, y))
}
df_beta_ue_dis <- df_beta %>% select(user_eng_dis)
df_release_ue_dis <- df_release %>% select(user_eng_dis)
df_train_ue_dis <- df_train_f %>% select(c(user_eng_dis, "label"))
df_beta_v_ue_dis <- df_beta %>% select(user_eng_dis)
df_release_v_ue_dis <- df_release %>% select(user_eng_dis)
df_validate_ue_dis <- df_train_f %>% select(c(user_eng_dis, "label"))
df_beta_ue_dis <- df_beta %>% select(user_eng_dis)
df_release_ue_dis <- df_release %>% select(user_eng_dis)
df_train_ue_dis <- df_train_f %>% select(c(user_eng_dis, "label"))
df_beta_v_ue_dis <- df_v_beta %>% select(user_eng_dis)
df_release_v_ue_dis <- df_v_release %>% select(user_eng_dis)
df_validate_ue_dis <- df_validate_f %>% select(c(user_eng_dis, "label"))
par(mfrow = c(2, 2))  ## Set up a 2 x 2 plotting space
## QQ plot in R to compare two data samples
for (i in user_eng_dis) {
x <- df_beta_v_ue_dis[,i]
y <- df_release_v_ue_dis[,i]
rel_beta <- table(x)/nrow(df_beta_v_ue_dis) #divide the frequency counts by the total
beta_bar <- barplot(rel_beta,
main = "Beta", #Give your chart a title
ylim=c(0,1), border=F, col = "navy",
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(beta_bar, rel_beta+0.025, paste(round(rel_beta*100), "%", sep="") ,cex=1)
rel_release <- table(y)/nrow(df_release_v_ue_dis) #divide the frequency counts by the total
release_bar <- barplot(rel_release,
main = "Release", #Give your chart a title
ylim=c(0,1), border=F, col = "navy",
xlab = i, #Label the x axis
ylab = "Relative Frequency" #Label the y axis
)
# Add the text
text(release_bar, rel_release+0.025, paste(round(rel_release*100), "%", sep="") ,cex=1)
}
