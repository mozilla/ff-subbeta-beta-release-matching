for (i in vlist) {
ridge_train <- ggplot(df_train_ue, aes(x = eval(as.name(i)), y = label, fill = label)) +
geom_density_ridges() +
labs(title=i,x="Channel", y = "Measure") +
theme_ridges() +
scale_fill_manual(values=c("#111d5e", "#b21f66")) +
theme(legend.position = "none")
ridge_valid <- ggplot(df_validate_ue, aes(x = eval(as.name(i)), y = label, fill = label)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=20) +
labs(title=i,x="Channel", y = "Measure") +
theme_ridges() +
scale_fill_manual(values=c("#111d5e", "#b21f66")) +
theme(legend.position = "none")
print(plot_grid(ridge_train, ridge_valid, ncol = 1,labels = c('V67','V68')))
}
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
ridge_train <- ggplot(df_train_ue, aes(x = eval(as.name(i)), y = label, fill = label)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=20) +
labs(title=i,x="Channel", y = "Measure") +
theme_ridges() +
scale_fill_manual(values=c("#111d5e", "#b21f66")) +
theme(legend.position = "none")
ridge_valid <- ggplot(df_validate_ue, aes(x = eval(as.name(i)), y = label, fill = label)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=20) +
labs(title=i,x="Channel", y = "Measure") +
theme_ridges() +
scale_fill_manual(values=c("#111d5e", "#b21f66")) +
theme(legend.position = "none")
print(plot_grid(ridge_train, ridge_valid, ncol = 1,labels = c('V67','V68')))
}
par(mfrow = c(4, 2))  ## Set up a 2 x 3 plotting space
## QQ plot in R to compare two data samples
for (i in user_eng) {
x_t <- df_beta_ue[,i]
y_t <- df_release_ue[,i]
rg_t <- range(x_t, y_t, na.rm=T)
test_t <- ks.test(x_t, y_t)$statistic
test_t <- paste("KS Test = ", round(test_t, 3))
x_v <- df_beta_v_ue[,i]
y_v <- df_release_v_ue[,i]
rg_v <- range(x_v, y_v, na.rm=T)
test_v <- ks.test(x_v, y_v)$statistic
test_v <- paste("KS Test = ", round(test_v, 3))
########
qqplot(x_t, y_t, main=i, xlim=rg_t, ylim=rg_t, xlab = "Beta", ylab = "Release", pch = 1)
# mtext(test, side=3)
text(min(x_t), (if(max(x_t) > max(y_t)) max(x_t) else max(y_t)), test_t, adj=c(0,1))
abline(0,1, col="#fe346e", lty=2)
qqplot(x_v, y_v, main=i, xlim=rg_v, ylim=rg_v, xlab = "Beta", ylab = "Release", pch = 1)
# mtext(test, side=3)
text(min(x_v), (if(max(x_v) > max(y_v)) max(x_v) else max(y_v)), test_v, adj=c(0,1))
abline(0,1, col="#fe346e", lty=2)
}
par(mfrow = c(4, 2))  ## Set up a 2 x 3 plotting space
## QQ plot in R to compare two data samples
for (i in user_eng) {
# Training
x_t <- df_beta_ue[,i]
y_t <- df_release_ue[,i]
rg_t <- range(x_t, y_t, na.rm=T)
test_t <- ks.test(x_t, y_t)$statistic
test_t <- paste("KS Test = ", round(test_t, 3))
# Validation
x_v <- df_beta_v_ue[,i]
y_v <- df_release_v_ue[,i]
rg_v <- range(x_v, y_v, na.rm=T)
test_v <- ks.test(x_v, y_v)$statistic
test_v <- paste("KS Test = ", round(test_v, 3))
########
title_t <- paste('V67', i, sep='\n')
qqplot(x_t, y_t, main=title_t, xlim=rg_t, ylim=rg_t, xlab = "Beta", ylab = "Release", pch = 1)
# mtext(test, side=3)
text(min(x_t), (if(max(x_t) > max(y_t)) max(x_t) else max(y_t)), test_t, adj=c(0,1))
abline(0,1, col="#fe346e", lty=2)
title_v <- paste('V68', i, sep='\n')
qqplot(x_v, y_v, main=title_v, xlim=rg_v, ylim=rg_v, xlab = "Beta", ylab = "Release", pch = 1)
# mtext(test, side=3)
text(min(x_v), (if(max(x_v) > max(y_v)) max(x_v) else max(y_v)), test_v, adj=c(0,1))
abline(0,1, col="#fe346e", lty=2)
}
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
ridge_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~eval(as.name(i)), split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
ridge_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~eval(as.name(i)), split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
print(subplot(p1, p2))
}
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~eval(as.name(i)), split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~eval(as.name(i)), split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
print(subplot(p_train, p_valid))
}
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = df_train_ue[i], split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = df_train_ue[i], split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
print(subplot(p_train, p_valid))
}
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
value <- eval(as.name(i))
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~value, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~value, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
print(subplot(p_train, p_valid))
}
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = i
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
print(subplot(p_train, p_valid))
}
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T))
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T))
print(subplot(p_train, p_valid))
}
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T))
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T))
#print(subplot(p_train, p_valid))
}
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T))
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T))
subplot(p_train, p_valid)
}
df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T))
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
print(subplot(p_train, p_valid))
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
subplot(p_train, p_valid)
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p <- subplot(p_train, p_valid)
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p <- plotly::subplots(p_train, p_valid)
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p <- plotly::subplot(p_train, p_valid)
p
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V67',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~num_bookmarks, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Num Bookmarks"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
plotly::subplot(p_train, p_valid)
p_train <- df_train_ue %>%
plot_ly(x = ~label, y = ~daily_max_tabs, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Daily Max Tabs"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
p_valid <- df_validate_ue %>%
plot_ly(x = ~label, y = ~daily_max_tabs, split = ~label,
type = 'violin', box = list(visible = T),
meanline = list(visible = T)) %>%
layout(
title = 'V68',
xaxis = list(
title = "Daily Max Tabs"
),
yaxis = list(
title = "Measure",
zeroline = F
)
)
plotly::subplot(p_train, p_valid)
vlist <- c('num_bookmarks','daily_max_tabs','daily_max_tabs_max','startup_ms')
## Ridgeline  plots
for (i in vlist) {
ridge_train <- ggplot(df_train_ue, aes(x = eval(as.name(i)), y = label, fill = label)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=20) +
labs(title=i,x="Channel", y = "Measure") +
theme_ridges() +
scale_fill_manual(values=c("#111d5e", "#b21f66")) +
theme(legend.position = "none")
ridge_valid <- ggplot(df_validate_ue, aes(x = eval(as.name(i)), y = label, fill = label)) +
geom_density_ridges(alpha=0.6, stat="binline", bins=20) +
labs(title=i,x="Channel", y = "Measure") +
theme_ridges() +
scale_fill_manual(values=c("#111d5e", "#b21f66")) +
theme(legend.position = "none")
print(plot_grid(ridge_train, ridge_valid, ncol = 1,labels = c('V67','V68')))
}
